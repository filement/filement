#!/usr/bin/perl

use strict;
use warnings;

use Config;

my %clouds = (
	# development cloud
	'cb66af79d526f0bae108b2a7540a41f4' => {
		'server' => 'storage.filement.com',
		'host' => q("127.0.0.1"),
		'port' => 3306,
		'username' => q("filement_cloud"),
		'password' => q("parola"),
		'schema' => q("filement_cloud")
	},

	# production clouds
	'f1b856649987e83070e58fd6a41eea54' => {
		'server' => 'storage.filement.com',
		'host' => q("127.0.0.1"),
		'port' => 3306,
		'username' => q("filement_cloud"),
		'password' => q("parola"),
		'schema' => q("filement_cloud"),
	},
	'fab77d1793fecdf6ca571912462c3708' => {
		'server' => 'bg.filement.com',
		'host' => q("192.168.192.60"),
		'port' => 3306,
		'username' => q("filement_cloud"),
		'password' => q("parola"),
		'schema' => q("filement_cloud"),
	},
	'76b5f259aa844553da7013fb2b7cb6d4' => {
		'server' => 'bg2.filement.com',
		'host' => q("192.168.192.195"),
		'port' => 3306,
		'username' => q("filement_cloud"),
		'password' => q("parola"),
		'schema' => q("filement_cloud"),
	},
	'a977f0155b4b33d54adc81e795e6e890' => {
		'server' => 'hosting2.filement.com',
		'host' => q("127.0.0.1"),
		'port' => 3306,
		'username' => q("filement_cloud"),
		'password' => q("parola"),
		'schema' => q("filement_cloud"),
	},
	'b06ff5e52ef7a23cb0d8420ba08b86f2' => {
		'server' => 'hosting1.webconnect.bg',
		'host' => q("127.0.0.1"),
		'port' => 3306,
		'username' => q("filement_cloud"),
		'password' => q("parola"),
		'schema' => q("filement_cloud"),
	},
	'51b29e6cb104052cd00ed2612924f7b4' => {
		'server' => 'hosting.webconnect.es',
		'host' => q("127.0.0.1"),
		'port' => 3306,
		'username' => q("filement_cloud"),
		'password' => q("parola"),
		'schema' => q("filement_cloud"),
	},
);

my $platform;
my $target = 'device';

open VERSION, '<version';
my $version = <VERSION>;
chop $version;
close VERSION;

my ($flag_dev, $flag_debug, $flag_upgrade_test, $uuid) = (0, 0, 0, 0);

# Parse command line options.
for (@ARGV)
{
	if (/^--dev$/)
	{
		$flag_dev = 1;
	}
	elsif (/^--debug$/)
	{
		$flag_debug = 1;
	}
	elsif (/^--upgrade-test$/)
	{
		$flag_upgrade_test = 1;
	}
	elsif (/^--host=(.*)$/)
	{
		$platform = $1;
	}
	elsif (/^--target=(.*)$/)
	{
		$target = $1;
	}
	elsif (/^--uuid=(.*)$/)
	{
		$uuid = $1;
	}
	else
	{
		print "Usage: $0 [OPTION ...]\n\t--dev          \tconfigure for flmntdev.com\n\t--debug        \tconfigure with debug capabilities\n\t--host=PLATFORM\tconfigure for PLATFORM\n\t--target=TARGET\tconfigure for TARGET (default: device)\n\t--upgrade-test \tUse a different command for upgrade list (used for testing)\n\t--uuid=UUID    \tconfigure public cloud with the given UUID\n";
		exit;
	}
}

my $options = ($flag_dev ? '-DTEST=-10' : '').($flag_debug ? ' -DRUN_MODE=1 -DDEBUG -g -fstack-protector-all' : ' -DRUN_MODE=2').($flag_upgrade_test ? ' -DUPGRADE_TEST' : '');

# Set default platform if no platform is specified.
$platform = $Config{'osname'} if !defined($platform);

# If --uuid is specified, treat the device as pubcloud.
$target = 'pubcloud' if (defined($clouds{$uuid}));

my ($cc, $link, $flags, $shared, $suffix, $storage, $root, $libs, $libs1, $strip, $libdir, $getso, $soname);

# TODO link time optimization when creating the shared library and the executable (-flto)

if ($platform eq 'darwin')
{
	$cc = 'clang';
	$options .= ' -O2 -fomit-frame-pointer' if !$flag_debug;
	$platform = '-DPLATFORM_ID=2 -DOS_MAC -DTLS -DEXECUTABLE=\\\"/Applications/Filement.app/Contents/MacOS/Filement\\\" -DPREFIX=\\\"/Applications/Filement.app/\\\" -DUPGRADE_PREFIX=\\\"/Applications/Filement.app/\\\"';
	$link = '-lz -lgnutls -lavformat -lavutil -lresolv -framework CoreFoundation -framework CoreServices';
	$flags = '-Wno-unused-value -Wno-empty-body';
	$shared = '-dynamiclib';
	$suffix = '.dylib';
	$storage = 'storage_sqlite';
	$root = '/usr'; # TODO this doesn't seem right
	$libs = '';
	$libs1 = '../lib/libminiupnpc_filement.a ../lib/libepeg.a ../lib/libjpeg.a';
	$strip = '/usr/bin/strip -x -S ../bin/device -o ../bin/device_stripped';
	$libdir = '/Applications/Filement.app/Contents/Frameworks';
	$getso = 'basename $(otool -XD "$1")';
	$soname = '-install_name';
}
elsif ($platform eq 'ios')
{
	#$cc = '/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/clang';
	$cc = '/Applications/Xcode.app/Contents/Developer/Toolchains/XCodeDefault.xctoolchain/usr/bin/clang';
	#$options .= ' -arch armv7 -gdwarf-2 -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk';
	$options .= ' -arch armv7 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.1.sdk';
	$options .= ' -O2 -fomit-frame-pointer' if !$flag_debug;
	$platform = '-DPLATFORM_ID=8 -DOS_MAC -DOS_IOS -DEXECUTABLE=\\\"/Applications/Filement.app/Contents/MacOS/Filement\\\" -DPREFIX=\\\"/Applications/Filement.app/\\\" -DUPGRADE_PREFIX=\\\"/Applications/Filement.app/\\\"';
	#$link = '-lz -lavformat -lavutil -lresolv';
	$link = '-framework Foundation -framework AssetsLibrary -lz -lobjc -lresolv';
	$flags = '-Wno-unused-value -Wno-empty-body';
	$shared = '-dynamiclib';
	$suffix = '.dylib';
	$storage = 'storage_sqlite';
	$root = '/usr'; # TODO this doesn't seem right
	$libs = '';
	$libs1 = '../ios/ios/evfs.o';
	$strip = '';
	$libdir = '/Applications/Filement.app/Contents/Frameworks';
	$getso = 'basename $(otool -XD "$1")';
	$soname = '-install_name';
}
elsif ($platform eq 'linux')
{
	#$cc = 'gcc44';
	$cc = 'gcc';
	$options .= ' -O2 -fomit-frame-pointer' if !$flag_debug;
	$platform = '-DPLATFORM_ID=4 -DOS_LINUX -DTLS -DEXECUTABLE=\\\"/usr/local/bin/filement\\\" -DPREFIX=\\\"/usr/local/\\\" -DUPGRADE_PREFIX=\\\"/\\\" -D_POSIX_SOURCE';
	$link = '-lz -lgnutls -lavformat -lavutil -lm -ldl -Wl,-unresolved-symbols=ignore-in-shared-libs';
	#$link = '-lz -lavformat -lavutil -lm -ldl -Wl,-unresolved-symbols=ignore-in-shared-libs';
	$flags = '-Wno-unused-value'; # new versions of gcc require -Wno-unused-result instead
	$shared = '-shared';
	$suffix = '.so';
	$storage = 'storage_sqlite';
	$root = '/usr';
	$libs = '';
	$libs1 = '../lib/libminiupnpc_filement.a ../lib/libepeg.a ../lib/libjpeg.a';
	$libs1 = '../lib/libepeg.a ../lib/libjpeg.a' if ($target eq 'pubcloud');
	$strip = "cp ../bin/device ../bin/device_stripped\\n\\tstrip -R .comment -R .note ../bin/device_stripped";
	$libdir = '/usr/local/lib';
	$getso = q(objdump -p "$1"|grep SONAME|awk '{print $2}');
	$soname = '-soname';
}
elsif ($platform eq 'emulator')
{
	$cc = 'gcc';
	$options .= ' -Os -fomit-frame-pointer' if !$flag_debug;
	$platform = '-DPLATFORM_ID=14 -DOS_LINUX -DEMULATOR -DEXECUTABLE=\\\"/usr/local/bin/filement\\\" -DPREFIX=\\\"/\\\" -D_POSIX_SOURCE';
	$link = '-lz -lm -ldl';
	$flags = '';
	$shared = '-shared';
	$suffix = '.so';
	$storage = 'storage_remote';
	$root = '/usr';
	$libs = 'md5.o';
	$libs1 = '../lib/libminiupnpc_filement.a ../lib/libepeg.a ../lib/libjpeg.a lib/md5.o';
	$strip = '';
	$libdir = '';
	$getso = q(objdump -p "$1"|grep SONAME|awk '{print $2}');
	$soname = '-soname';
}
elsif ($platform eq 'belkin')
{
	$cc = 'mipsel-linux-uclibc-gcc';
	$options .= ' -Os -fomit-frame-pointer' if !$flag_debug;
	$platform = '-DPLATFORM_ID=14 -DOS_LINUX -DBELKIN -DEXECUTABLE=\\\"/usr/local/bin/filement\\\" -DPREFIX=\\\"/\\\" -D_POSIX_SOURCE';
	$link = '-lz -lm -ldl';
	$flags = '';
	$shared = '-shared';
	$suffix = '.so';
	$storage = 'storage_remote';
	$root = '/opt/hndtools-mipsel-linux-uclibc-4.1.2-32';
	$libs = 'md5.o';
	$libs1 = '../lib/libminiupnpc_filement.a ../lib/libepeg.a ../lib/libjpeg.a lib/md5.o ../lib/ifaddrs.o';
	$strip = "cp ../bin/device ../bin/device_stripped\\n\\tstrip -R .comment -R .note ../bin/device_stripped";
	$libdir = '';
	$getso = q(objdump -p "$1"|grep SONAME|awk '{print $2}');
	$soname = '-soname';
}
elsif ($platform eq 'tplink')
{
	$cc = 'mips-linux-gcc';
	$options .= ' -Os -fomit-frame-pointer' if !$flag_debug;
	$platform = '-DPLATFORM_ID=14 -DOS_LINUX -DTPLINK -DEXECUTABLE=\\\"/usr/local/bin/filement\\\" -DPREFIX=\\\"/\\\" -D_POSIX_SOURCE';
	$link = '-lm -ldl -lrt';
	$flags = '';
	$shared = '-shared';
	$suffix = '.so';
	$storage = 'storage_remote';
	$root = '/root/tp-link/wdr4300/toolchain/gcc-4.3.3/usr';
	$libs = 'md5.o';
	$libs1 = '../lib/libminiupnpc_filement.a ../lib/libepeg.a ../lib/libjpeg.a lib/md5.o ../lib/ifaddrs.o';
	$strip = "cp ../bin/device ../bin/device_stripped\\n\\tstrip -R .comment -R .note ../bin/device_stripped";
	$libdir = '';
	$getso = q(objdump -p "$1"|grep SONAME|awk '{print $2}');
	$soname = '-soname';
}
else
{
	# TODO
	# http://alma.ch/perl/perloses.htm

	print "Platform not supported\n";
	exit;
}

$platform = '-D'.uc($target)." $platform";

# TODO do make mrpropper (but manually since Makefile may not exist) // wtf? if it does not exist, there is no need to call mrpropper

# Preprocess actions.
open STDIN, '<', 'src/actions.in';
system qq($cc -E -x c $platform -o src/actions.out -);

$cc =~ s/\//\\\//g;
$options =~ s/\//\\\//g;
$platform =~ s/\//\\\//g;
$root =~ s/\//\\\//g;
$libs1 =~ s/\//\\\//g;
$strip =~ s/\//\\\//g;
$libdir =~ s/\//\\\//g;

my @replace = (
	'-e', "s/\@{CC}/$cc/g",
	'-e', "s/\@{OPTIONS}/$options/g",
	'-e', "s/\@{FLAGS}/$flags/g",
	'-e', "s/\@{LINK}/$link/g",
	'-e', "s/\@{PLATFORM}/$platform/g",
	'-e', "s/\@{SHARED}/$shared/g",
	'-e', "s/\@{SUFFIX}/$suffix/g",
	'-e', "s/\@{STORAGE}/$storage/g",
	'-e', "s/\@{ROOT}/$root/g",
	'-e', "s/\@{LIBS}/$libs/g",
	'-e', "s/\@{LIBS1}/$libs1/g",
	'-e', "s/\@{STRIP}/$strip/g",
	'-e', "s/\@{SONAME}/$soname/g",
);

my $length;

# actions_sorted.h
open SORTED, '>', 'src/actions_sorted.h';
print SORTED "#define ACTIONS ";
my $actions = "src/actions.out";
if (-f $actions)
{
	open RAW, "<$actions";

	my @actions = ();
	while (<RAW>)
	{
		next if /^\s*#/; # skip comments
		s/^\s*(\S*)\s*$/$1/; # trim whitespaces
		next if !$1; # skip empty lines
		push @actions, $_;
	}
	@actions = sort(@actions);

	# Generate actions array
	for (@actions)
	{
		my $length = length;
		my $handler = $_;
		$handler =~ s/\./_/g;
		print SORTED qq|\\\n\t{.name = {.data = "$_", .length = $length}, .handler = &$handler},|;
	}
	print SORTED "\n";

	# Generate function declarations
	for (@actions)
	{
		my $handler = $_;
		$handler =~ s/\./_/g;
		print SORTED "int $handler(const struct http_request *request, struct http_response *restrict response, struct resources *restrict resources, const union json *options);\n"
	}

	close RAW;
}
close SORTED;

# gnutls.compile
open STDOUT, '>', 'external/gnutls.compile';
$length = length $version;
system 'sed', '-e', "s/\@{SUFFIX}/$suffix/", '-e', "s/\@{LIBDIR}/$libdir/", '-e', "s/\@{GETSO}/$getso/", 'external/gnutls.compile.in';
chmod 0755, 'external/gnutls.compile';

# ffmpeg.compile
open STDOUT, '>', 'external/ffmpeg.compile';
$length = length $version;
system 'sed', '-e', "s/\@{SUFFIX}/$suffix/", '-e', "s/\@{LIBDIR}/$libdir/", '-e', "s/\@{GETSO}/$getso/", 'external/ffmpeg.compile.in';
chmod 0755, 'external/ffmpeg.compile';

# device/device.c
open STDOUT, '>', 'src/device/device.c';
$length = length $version;
system 'sed', '-e', "s/\@{VERSION}/$version/", '-e', "s/\@{VERSION_LENGTH}/$length/", '-e', qq(s/\@{UUID}/"$uuid"/), 'src/device/device.c.in';

# failsafe.c
open STDOUT, '>', 'src/failsafe.c';
$length = length $version;
system 'sed', '-e', "s/\@{VERSION}/$version/", '-e', "s/\@{VERSION_LENGTH}/$length/", 'src/failsafe.c.in';

# main.c
open STDOUT, '>', 'src/main.c';
$length = length $version;
system 'sed', '-e', "s/\@{VERSION}/$version/", '-e', "s/\@{VERSION_LENGTH}/$length/", 'src/main.c.in';

# Makefile
open STDOUT, '>', 'src/Makefile';
system 'sed', @replace, 'src/Makefile.in';

# Configure public cloud if UUID is specified.
if (defined($clouds{$uuid}))
{
	my $settings = $clouds{$uuid};

	my @replace = (
		'-e', "s/\@{MYSQL_HOSTNAME}/$settings->{host}/",
		'-e', "s/\@{MYSQL_PORT}/$settings->{port}/",
		'-e', "s/\@{MYSQL_USERNAME}/$settings->{username}/",
		'-e', "s/\@{MYSQL_PASSWORD}/$settings->{password}/",
		'-e', "s/\@{MYSQL_SCHEMA}/$settings->{schema}/",
	);

	# storage_mysql.h
	open STDOUT, '>', 'src/storage_mysql.h';
	system 'sed', @replace, 'src/storage_mysql.h.in';
}
