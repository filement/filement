#!/usr/bin/env perl

use strict;
use warnings;

use Config;

my %clouds = (
	# development cloud
	'cb66af79d526f0bae108b2a7540a41f4' => {
		'server' => 'storage.filement.com',
		'host' => q("127.0.0.1"),
		'port' => 3306,
		'username' => q("filement_cloud"),
		'password' => q("parola"),
		'schema' => q("filement_cloud")
	},

	# production clouds
	'f1b856649987e83070e58fd6a41eea54' => {
		'server' => 'storage.filement.com',
		'host' => q("127.0.0.1"),
		'port' => 3306,
		'username' => q("filement_cloud"),
		'password' => q("parola"),
		'schema' => q("filement_cloud"),
	},
	'fab77d1793fecdf6ca571912462c3708' => {
		'server' => 'bg.filement.com',
		'host' => q("192.168.192.60"),
		'port' => 3306,
		'username' => q("filement_cloud"),
		'password' => q("parola"),
		'schema' => q("filement_cloud"),
	},
	'76b5f259aa844553da7013fb2b7cb6d4' => {
		'server' => 'bg2.filement.com',
		'host' => q("192.168.192.195"),
		'port' => 3306,
		'username' => q("filement_cloud"),
		'password' => q("parola"),
		'schema' => q("filement_cloud"),
	},
	'a977f0155b4b33d54adc81e795e6e890' => {
		'server' => 'hosting2.filement.com',
		'host' => q("127.0.0.1"),
		'port' => 3306,
		'username' => q("filement_cloud"),
		'password' => q("parola"),
		'schema' => q("filement_cloud"),
	},
	'b06ff5e52ef7a23cb0d8420ba08b86f2' => {
		'server' => 'hosting1.webconnect.bg',
		'host' => q("127.0.0.1"),
		'port' => 3306,
		'username' => q("filement_cloud"),
		'password' => q("parola"),
		'schema' => q("filement_cloud"),
	},
	'51b29e6cb104052cd00ed2612924f7b4' => {
		'server' => 'hosting.webconnect.es',
		'host' => q("127.0.0.1"),
		'port' => 3306,
		'username' => q("filement_cloud"),
		'password' => q("parola"),
		'schema' => q("filement_cloud"),
	},
);

my $platform;
my $target = 'device';

open VERSION, '<version';
my $version = <VERSION>;
chop $version;
close VERSION;

my ($flag_dev, $flag_debug, $flag_upgrade, $flag_upgrade_test, $uuid, $prefix, $android_ndk, $release) = (0, 0, 0, 0, '', '', '/usr/lib/android-ndk', 0);

# Parse command line options.
for (@ARGV)
{
	if (/^--dev$/)
	{
		$flag_dev = 1;
	}
	elsif (/^--debug$/)
	{
		$flag_debug = 1;
	}
	elsif (/^--upgrade$/)
	{
		$flag_upgrade = 1;
	}
	elsif (/^--upgrade-test$/)
	{
		$flag_upgrade_test = 1;
	}
	elsif (/^--prefix=(.*)$/)
	{
		$prefix = $1;
	}
	elsif (/^--host=(.*)$/)
	{
		$platform = $1;
	}
	elsif (/^--target=(.*)$/)
	{
		$target = $1;
	}
	elsif (/^--uuid=(.*)$/)
	{
		$uuid = $1;
	}
	elsif (/^--android-ndk=(.*)$/)
	{
		$platform = 'android';
		$android_ndk = $1;
	}
	elsif (/^--release$/)
	{
		$release = 1;
	}
	else
	{
		print "Usage: $0 [OPTION ...]
\t--dev            \tconfigure for flmntdev.com instead of filement.com
\t--debug          \tconfigure with debug capabilities
\t--release        \tcompile for a public release (use only if you know what you're doing)
\t--prefix=PREFIX  \tconfigure for installation in the directory PREFIX
\t--host=PLATFORM  \tconfigure for PLATFORM
\t--target=TARGET  \tconfigure for TARGET (default: device)
\t--upgrade        \tenable automatic upgrade
\t--upgrade-test   \tmake the distribute server only give upgrades to a list of devices designated for development
\t--uuid=UUID      \tconfigure public cloud with the given UUID
\t--android-ndk=NDK\tspecify path to Native Development Kit for Android
";
		exit;
	}
}

# Set default platform if no platform is specified.
$platform = $Config{'osname'} if !defined($platform);

# If --uuid is specified, treat the device as pubcloud.
$target = 'pubcloud' if (defined($clouds{$uuid}));

my ($cc, $shared, $suffix, $storage, $storage_flags, $root, $libs, $libs_, $strip, $soname, $gmp, $setup);
my $flags = '';
my $definitions = ($flag_dev ? '-DTEST=-10' : '').($flag_debug ? ' -DRUN_MODE=1 -DDEBUG' : ' -DRUN_MODE=2').($flag_upgrade ? ' -DUPGRADE' : '').($flag_upgrade_test ? ' -DUPGRADE_TEST' : '');
my $options = ($flag_debug ? ' -g -fstack-protector-all' : ' -fomit-frame-pointer');
my $link = '';

$definitions .= ' -DRELEASE' if ($release);

# TODO some targets are supported onlyon some platforms; pubcloud and distribute are supported only on linux

# TODO link time optimization when creating the shared library and the executable (-flto)
# TODO strip

# TODO add feature: FILEMENT_FSEARCH
# TODO target-specific sources (like for android) so that code doesn't mix

my @features = ();

if ($platform eq 'darwin')
{
	$prefix ||= '/Applications/Filement.app';
	if ($release)
	{
		$prefix = '/Applications/Filement.app';
		$flag_upgrade = 1;
	}

	# clang -### 2>&1 | grep Target | awk -F '[ -]' '{print $2;}'
	# TODO make sure ffmpeg is added

	$cc = 'clang';
	$shared = '-dynamiclib';
	$suffix = '.dylib';
	$soname = '-install_name';
	$gmp = '--disable-assembly';
	$strip = 'strip -x -S ../bin/device -o ../bin/device_stripped'; # TODO fix this
	$strip = ''; # TODO remove this

	$flags .= ' -O2' if !$flag_debug;
	# -D_GNU_SOURCE -D_BSD_SOURCE -D_DEFAULT_SOURCE 
	$definitions .= ' -DPLATFORM_ID=2 -DOS_MAC -DPREFIX=\\\"'.$prefix.'\\\"';
	$options .= ' -pthread -Wno-unused-value -Wno-empty-body';
	$link .= ' -lz -lresolv -framework CoreFoundation -framework CoreServices -framework VideoDecodeAcceleration -framework QuartzCore -framework Security';

	$root = '';
	$storage = 'storage_sqlite';
	$libs = 'libepeg.a libjpeg.a libminiupnpc.a libavformat.a libavcodec.a libavutil.a libgnutls.a libnettle.a libhogweed.a libgmp.a';

	push @features, 'FILEMENT_TLS', 'FILEMENT_THUMBS', 'FILEMENT_UPNP', 'FILEMENT_AV';
	push @features, 'FILEMENT_UPGRADE' if $flag_upgrade;
}
elsif ($platform eq 'linux')
{
	$prefix ||= '/usr/local';
	if ($release)
	{
		$prefix = '/usr';
		$flag_upgrade = 0;
	}

	# gcc -dumpmachine | awk -F '[-]' '{print $1;}'

	$cc = 'gcc';
	$shared = '-shared';
	$suffix = '.so';
	$soname = '-soname';
	$gmp = '';
	$strip = ($flag_debug ? '' : "strip -R .comment -R .note");
	$strip = ''; # TODO remove this

	$flags .= ' -pthread';
	$flags .= ' -O2' if !$flag_debug;
	$definitions .= ' -DPLATFORM_ID=4 -DOS_LINUX -DPREFIX=\\\"'.$prefix.'\\\" -D_GNU_SOURCE -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700';
	$options .= ' `pkg-config --cflags libavformat libavutil` -Wno-unused-value'; # replace with -Wno-unused-result
	$link .= ' -lz -lgnutls `pkg-config --libs libavformat libavutil` -lm -ldl -Wl,-unresolved-symbols=ignore-in-shared-libs';

	$root = '';
	$storage = 'storage_sqlite';
	$libs = 'libepeg.a libjpeg.a'.(($target eq 'pubcloud') ? '' : ' libminiupnpc.a');

	push @features, 'FILEMENT_TLS';
	push @features, 'FILEMENT_THUMBS', 'FILEMENT_UPNP', 'FILEMENT_AV' if (($target eq 'device') || ($target eq 'pubcloud'));
	push @features, 'FILEMENT_UPGRADE' if $flag_upgrade;
}
elsif ($platform eq 'freebsd')
{
	$prefix ||= '/usr/local';
	if ($release)
	{
		$prefix = '/usr';
		$flag_upgrade = 0;
	}

	$cc = 'gcc';
	$shared = '-shared';
	$suffix = '.so';
	$soname = '-soname';
	$gmp = '';
	$strip = ($flag_debug ? '' : "strip -R .comment -R .note");
	$strip = ''; # TODO remove this

	$flags .= ' -pthread';
	$flags .= ' -O2' if !$flag_debug;
	$definitions .= ' -DPLATFORM_ID=6 -DOS_FREEBSD -DPREFIX=\\\"'.$prefix.'\\\"';
	$options .= ' `pkg-config --cflags libavformat libavutil` -Wno-unused-value'; # replace with -Wno-unused-result
	$link .= ' -lz -lgnutls `pkg-config --libs libavformat libavutil` -lm -lexecinfo';

	$root = '';
	$storage = 'storage_sqlite';
	$libs = 'libepeg.a libjpeg.a'; # TODO fix miniupnpc; its makefile is not compatible with freebsd

	push @features, 'FILEMENT_TLS', 'FILEMENT_THUMBS', 'FILEMENT_AV';
}
elsif ($platform eq 'android')
{
	$prefix ||= '/usr/local';

	$cc = 'arm-linux-androideabi-gcc';
	$shared = '-shared';
	$suffix = '.so';
	$soname = '-soname';
	$gmp = '';
	$strip = "cp ../bin/device ../bin/device_stripped\\n\\tstrip -R .comment -R .note ../bin/device_stripped";
	$strip = ''; # TODO remove this

	$flags .= " --sysroot=$android_ndk/platforms/android-21/arch-arm -pthread -marm -Wno-unused-result"; # http://www.apps4android.org/?p=4926
	$flags .= ' -O2' if !$flag_debug;
	$definitions .= ' -DPLATFORM_ID=10 -DOS_ANDROID -D_GNU_SOURCE -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700'; # TODO set prefix
	$options .= ' -I../android -Wno-unused-value'; # replace with -Wno-unused-result
	$link .= ' -lz -lm -ldl -Wl,-unresolved-symbols=ignore-in-shared-libs';

	$root = "$android_ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64";
	$storage = 'storage_sqlite';
	$storage_flags = "--sysroot=$android_ndk/platforms/android-21/arch-arm";
	$libs = '../android/ifaddrs.o ../android/ifc_utils.o ../android/java.o';
	$setup = 'export OSTYPE="android"';

	# TODO from the old make:
	# 	-DEXECUTABLE="/data/data/com.filement.app/filement"
	# TODO fix the uuid* functions in device/uuid.c
	# TODO md5.o and device/uuid.c only for android

	#push @features, '';
}
elsif ($platform eq 'ios')
{
	#$cc = '/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/clang';
	$cc = '/Applications/Xcode.app/Contents/Developer/Toolchains/XCodeDefault.xctoolchain/usr/bin/clang';
	#$options .= ' -arch armv7 -gdwarf-2 -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk';
	$options .= ' -pthread -arch armv7 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.1.sdk';
	$options .= ' -O2' if !$flag_debug;
	$definitions .= ' -DPLATFORM_ID=8 -DOS_MAC -DOS_IOS -DPREFIX=\\\"'.$prefix.'\\\"';
	#$link = ' -lz -lavformat -lavutil -lresolv';
	$link = ' -framework Foundation -framework AssetsLibrary -lz -lobjc -lresolv';
	$flags = '-Wno-unused-value -Wno-empty-body';
	$shared = '-dynamiclib';
	$suffix = '.dylib';
	$storage = 'storage_sqlite';
	$root = '';
	$libs = '../ios/ios/evfs.o';
	$strip = '';
	$gmp = '';
	$soname = '-install_name';
}
elsif ($platform eq 'emulator')
{
	$cc = 'gcc';
	$options .= ' -Os' if !$flag_debug;
	$definitions .= ' -DPLATFORM_ID=14 -DOS_LINUX -DEMULATOR -DPREFIX=\\\"'.$prefix.'\\\"';
	$link = ' -lz -lm -ldl';
	$flags = '-pthread';
	$shared = '-shared';
	$suffix = '.so';
	$storage = 'storage_remote';
	$root = '';
	$libs_ = 'md5.o'; # TODO compile this as part of device and pubc
	$libs = '../lib/libminiupnpc_filement.a ../lib/libepeg.a ../lib/libjpeg.a lib/md5.o';
	$strip = '';
	$gmp = '';
	$soname = '-soname';
}
elsif ($platform eq 'belkin')
{
	$cc = 'mipsel-linux-uclibc-gcc';
	$options .= ' -Os' if !$flag_debug;
	$definitions .= ' -DPLATFORM_ID=14 -DOS_LINUX -DBELKIN -DPREFIX=\\\"'.$prefix.'\\\"';
	$link = ' -lz -lm -ldl';
	$flags = '-pthread';
	$shared = '-shared';
	$suffix = '.so';
	$storage = 'storage_remote';
	$root = '/opt/hndtools-mipsel-linux-uclibc-4.1.2-32';
	$libs_ = 'md5.o'; # TODO compile this as part of device and pubc
	$libs = '../lib/libminiupnpc_filement.a ../lib/libepeg.a ../lib/libjpeg.a lib/md5.o ../lib/ifaddrs.o';
	$strip = "cp ../bin/device ../bin/device_stripped\\n\\tstrip -R .comment -R .note ../bin/device_stripped";
	$gmp = '';
	$soname = '-soname';
}
elsif ($platform eq 'tplink')
{
	$cc = 'mips-linux-gcc';
	$options .= ' -Os' if !$flag_debug;
	$definitions .= ' -DPLATFORM_ID=14 -DOS_LINUX -DTPLINK -DPREFIX=\\\"'.$prefix.'\\\"';
	$link = ' -lm -ldl -lrt';
	$flags = '-pthread';
	$shared = '-shared';
	$suffix = '.so';
	$storage = 'storage_remote';
	$root = '/root/tp-link/wdr4300/toolchain/gcc-4.3.3/usr';
	$libs_ = 'md5.o'; # TODO compile this as part of device and pubc
	$libs = '../lib/libminiupnpc_filement.a ../lib/libepeg.a ../lib/libjpeg.a lib/md5.o ../lib/ifaddrs.o';
	$strip = "cp ../bin/device ../bin/device_stripped\\n\\tstrip -R .comment -R .note ../bin/device_stripped";
	$gmp = '';
	$soname = '-soname';
}
else
{
	# TODO
	# http://alma.ch/perl/perloses.htm

	print "Platform not supported\n";
	exit;
}

$definitions = '-D'.uc($target)." $definitions ".join(' ', map {"-D$_"} @features);

# TODO do make mrpropper (but manually since Makefile may not exist) // wtf? if it does not exist, there is no need to call mrpropper

# Preprocess actions.
system qq(gcc -E -x c $definitions -o src/actions.out src/actions.in);

$options = "$definitions $options";
$definitions =~ s/-D//g;

$storage_flags //= '';
$setup //= '';

$flags =~ s/\//\\\//g;
$options =~ s/\//\\\//g;
$definitions =~ s/\//\\\//g;
$root =~ s/\//\\\//g;
$libs =~ s/\//\\\//g;
$storage_flags =~ s/\//\\\//g;
$strip =~ s/\//\\\//g;

# Dump all configuration options for debug purposes.
open STDOUT, '>', 'config.log';
print "version=$version\n";
print "uuid=$uuid\n";
print "\n";
print "CC=$cc\n";
print "CFLAGS=$options\n";
print "DEFINITIONS=$definitions\n";
print "FLAGS=$flags\n";
print "LINK=$link\n";
print "SHARED=$shared\n";
print "SUFFIX=$suffix\n";
print "STORAGE=$storage\n";
print "STORAGE_FLAGS=$storage_flags\n";
print "ROOT=$root\n";
print "LIBS=$libs\n";
print "STRIP=$strip\n";
print "SONAME=$soname\n";
print "SETUP=$setup\n";
print "\n";
print "features: @features\n";

my @replace = (
	'-e', "s/\@{CC}/$cc/g",
	'-e', "s/\@{DEFINITIONS}/$definitions/g",
	'-e', "s/\@{CFLAGS}/$options/g",
	'-e', "s/\@{FLAGS}/$flags/g",
	'-e', "s/\@{LINK}/$link/g",
	'-e', "s/\@{SHARED}/$shared/g",
	'-e', "s/\@{SUFFIX}/$suffix/g",
	'-e', "s/\@{STORAGE}/$storage/g",
	'-e', "s/\@{STORAGE_FLAGS}/$storage_flags/g",
	'-e', "s/\@{ROOT}/$root/g",
	'-e', "s/\@{LIBS}/$libs/g",
	'-e', "s/\@{STRIP}/$strip/g",
	'-e', "s/\@{SONAME}/$soname/g",
	'-e', "s/\@{SETUP}/$setup/g",
);

my $length;

# actions_sorted.h
open SORTED, '>', 'src/actions_sorted.h';
print SORTED "#define ACTIONS ";
my $actions = "src/actions.out";
if (-f $actions)
{
	open RAW, "<$actions";

	my @actions = ();
	while (<RAW>)
	{
		next if /^\s*#/; # skip comments
		s/^\s*(\S*)\s*$/$1/; # trim whitespaces
		next if !$1; # skip empty lines
		push @actions, $_;
	}
	@actions = sort(@actions);

	# Generate actions array
	for (@actions)
	{
		my $length = length;
		my $handler = $_;
		$handler =~ s/\./_/g;
		print SORTED qq|\\\n\t{.name = {.data = "$_", .length = $length}, .handler = &$handler},|;
	}
	print SORTED "\n";

	# Generate function declarations
	for (@actions)
	{
		my $handler = $_;
		$handler =~ s/\./_/g;
		print SORTED "int $handler(const struct http_request *request, struct http_response *restrict response, struct resources *restrict resources, const union json *options);\n"
	}

	close RAW;
}
close SORTED;

# gnutls.compile
unlink 'src/external/gnutls.compile';
open STDOUT, '>', 'src/external/gnutls.compile';
$length = length $version;
system 'sed', '-e', "s/\@{GMP}/$gmp/", 'src/external/gnutls.compile.in';
chmod 0555, 'src/external/gnutls.compile';

# device/device.c
unlink 'src/device/device.c';
open STDOUT, '>', 'src/device/device.c';
$length = length $version;
system 'sed', '-e', "s/\@{VERSION}/$version/", '-e', "s/\@{VERSION_LENGTH}/$length/", '-e', qq(s/\@{UUID}/"$uuid"/), 'src/device/device.c.in';
chmod 0444, 'src/device/device.c';

# failsafe.c
unlink 'src/failsafe.c';
open STDOUT, '>', 'src/failsafe.c';
$length = length $version;
system 'sed', '-e', "s/\@{VERSION}/$version/", '-e', "s/\@{VERSION_LENGTH}/$length/", 'src/failsafe.c.in';
chmod 0444, 'src/failsafe.c';

# Makefile
unlink 'Makefile';
open STDOUT, '>', 'Makefile';
system 'sed', @replace, 'Makefile.in';
chmod 0444, 'Makefile';

# src/Makefile
unlink 'src/Makefile';
open STDOUT, '>', 'src/Makefile';
system 'sed', @replace, 'src/Makefile.in';
chmod 0444, 'src/Makefile';

# Configure public cloud if UUID is specified.
if (defined($clouds{$uuid}))
{
	my $settings = $clouds{$uuid};

	my @replace = (
		'-e', "s/\@{MYSQL_HOSTNAME}/$settings->{host}/",
		'-e', "s/\@{MYSQL_PORT}/$settings->{port}/",
		'-e', "s/\@{MYSQL_USERNAME}/$settings->{username}/",
		'-e', "s/\@{MYSQL_PASSWORD}/$settings->{password}/",
		'-e', "s/\@{MYSQL_SCHEMA}/$settings->{schema}/",
	);

	# storage_mysql.h
	open STDOUT, '>', 'src/storage_mysql.h';
	system 'sed', @replace, 'src/storage_mysql.h.in';
	chmod 0444, 'src/storage_mysql.h';
}
