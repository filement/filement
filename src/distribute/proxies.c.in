#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "types.h"
#include "format.h"
#include "log.h"
#include "protocol.h"
#include "filement.h"
#include "geolocation.h"
#include "proxies.h"

static struct
{
	int32_t coordinates[2];
	struct string host;
	uint16_t port;
} proxies_list[] = {@{PROXIES_LIST}};

#define proxies_count (sizeof(proxies_list) / sizeof(*proxies_list))

struct string *proxies_get(uint32_t address, size_t count)
{
	// assert(proxies_count >= count);

	size_t i;

	// Initialize proxies array.
	struct host *hosts = malloc(sizeof(struct host) * proxies_count);
	if (!hosts) return 0;
	for(i = 0; i < proxies_count; ++i)
	{
		memcpy(hosts[i].coords, proxies_list[i].coordinates, sizeof(int32_t [2]));
		hosts[i].name = &proxies_list[i].host;
		hosts[i].port = htons(proxies_list[i].port);
	}

	// Get the closest proxies.
	if (!closest(address, hosts, proxies_count, count)) ; // TODO handle this

	struct string *list = 0;
	char *start;

	// Initialize list string.
	size_t length = sizeof(struct string) + sizeof(uint32_t);
	for(i = 0; i < count; ++i) length += sizeof(uint32_t) + hosts[i].name->length + sizeof(uint16_t);
	list = malloc(length + 1);
	if (!list) goto finally;
	start = list->data = (char *)(list + 1);

	// Generate response.
	*(uint32_t *)start = (uint32_t)htonl(count);
	start += sizeof(uint32_t);
	for(i = 0; i < count; ++i)
	{
		write32(start, hosts[i].name->length);
		start += sizeof(uint32_t);
		start = format_bytes(start, hosts[i].name->data, hosts[i].name->length);

		write16(start, PORT_PROXY_DEVICE);
		start += sizeof(uint16_t);
	}
	*start = 0;
	list->length = start - list->data;

finally:
	free(hosts);
	return list;
}
